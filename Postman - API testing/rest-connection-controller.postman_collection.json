{
	"info": {
		"_postman_id": "69679351-9e5d-4c9e-bf9d-5d54fb4f47c6",
		"name": "rest-connection-controller",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24294340",
		"_collection_link": "https://dark-astronaut-260412.postman.co/workspace/Telerik---Final-Project-~17b108a4-3f4a-4892-826d-8bb170257f82/collection/30132667-69679351-9e5d-4c9e-bf9d-5d54fb4f47c6?action=share&source=collection_link&creator=24294340"
	},
	"item": [
		{
			"name": "Registration Sender",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"        /*\r",
							"        we are retrieving user ID for use further request\r",
							"        for example edit user info, etc.\r",
							"        */\r",
							"        var responseBody = pm.response.text(); // Get the response body as text\r",
							"        var match = responseBody.match(/id (\\d+)/); // Use a regular expression to extract the userId\r",
							"\r",
							"        if (match && match[1]) {\r",
							"        var userId = match[1];\r",
							"        console.log(\"User ID:\", userId);\r",
							"        pm.environment.set(\"userIdSender\", userId);\r",
							"        } else {\r",
							"        console.error(\"User ID not found in the response.\");\r",
							"        }\r",
							"\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"\r",
							"        var responseText = pm.response.text();\r",
							"        var parts = responseText.split(\" \");\r",
							"\r",
							"        var name = parts[3];\r",
							"        var id = parts[7];\r",
							"\r",
							"        // check name   length \r",
							"        pm.test(\"Name length is between 2 and 20\", function () {\r",
							"        pm.expect(name.length).to.be.at.least(2);\r",
							"        pm.expect(name.length).to.be.at.most(20);\r",
							"        });\r",
							"\r",
							"        // check id exists\r",
							"        pm.test(\"ID exists\", function () {\r",
							"        pm.expect(id).to.exist;\r",
							"        });\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//array for used names\r",
							"let usedUsernames = pm.environment.get(\"usedUsernames\");\r",
							"if (usedUsernames) {\r",
							"    usedUsernames = JSON.parse(usedUsernames);\r",
							"} else {\r",
							"    usedUsernames = [];\r",
							"}\r",
							"\r",
							"function makeid(l) {\r",
							"    var text;\r",
							"    var char_list = \"abcdefghijklmnopqrstuvwxyz\";\r",
							"    \r",
							"    do {\r",
							"        text = \"\";\r",
							"        for(var i = 0; i < l; i++) {\r",
							"            text += char_list.charAt(Math.floor(Math.random() * char_list.length));\r",
							"        }\r",
							"    } while (usedUsernames.includes(text)); // check if the username is unique \r",
							"\r",
							"//\r",
							"    usedUsernames.push(text);\r",
							"    pm.environment.set(\"usedUsernames\", JSON.stringify(usedUsernames));\r",
							"\r",
							"    pm.environment.set(\"usernameSender\", text);\r",
							"\r",
							"    return text;\r",
							"}\r",
							"// generate between 2 and 20 \r",
							"const length = Math.floor(Math.random() * 19) + 2;\r",
							"console.log(makeid(length));\r",
							"\r",
							"\r",
							"// generate email\r",
							"\r",
							"const uuid = Math.random().toString(36).substring(2, 15) +\r",
							"            Math.random().toString(36).substring(2, 15);\r",
							"const email = \"testaccount.\" + uuid + \"@abv.bg\";\r",
							"pm.environment.set(\"email\", email);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"value": "JSESSIONID={{sessionID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"category\": {\r\n    \"id\": 100,\r\n    \"name\": \"All\"\r\n  },\r\n  \"confirmPassword\": \"Project.10\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"Project.10\",\r\n  \"username\": \"{{usernameSender}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8081/api/users/",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate Sender",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    pm.environment.set(\"sessionID - sender\", pm.cookies.get(\"JSESSIONID\"));\r",
							"    console.log(pm.response);\r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{usernameSender}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "Project.10",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8081/authenticate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update First Name Sender",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"    const responseBodyInfo = pm.response.json();\r",
							"    const firstName = responseBodyInfo.firstName;\r",
							"    pm.environment.set(\"firstNameSender\", firstName);\r",
							"\r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.test(\"First name length is at least 3\", function () {\r",
							"        pm.expect(jsonData.firstName.length).to.be.at.least(3);\r",
							"    });\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"pm.environment.set(\"randomFirstName\", pm.variables.replaceIn(\"{{randomFirstName}}\"));\r",
							"pm.environment.set(\"randomLastName\", pm.variables.replaceIn(\"{{randomLastName}}\"));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"value": "Idea-a913d7da=066876f0-82a7-4363-a9c7-28ebe0bf6e96; JSESSIONID={{sessionID}}",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{userIdSender}}\",\r\n    \"username\": \"{{usernameSender}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"Ivanov\",\r\n    \"gender\": \"MALE\",\r\n    \"birthYear\": \"1905-12-09\",\r\n    \"personalReview\": null,\r\n    \"expertise\": \"Doctor\",\r\n    \"skills\": [],\r\n    \"location\": {\r\n        \"city\": {\r\n            \"country\": {},\r\n            \"id\": 23\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/api/users/auth/{{userIdSender}}/personal",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"api",
						"users",
						"auth",
						"{{userIdSender}}",
						"personal"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registration Receiver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    /*\r",
							"    we are retrieving user ID for use further request\r",
							"    for example edit user info, etc.\r",
							"    */\r",
							"    var responseBody = pm.response.text(); // Get the response body as text\r",
							"    var match = responseBody.match(/id (\\d+)/); // Use a regular expression to extract the userId\r",
							"\r",
							"    if (match && match[1]) {\r",
							"        var userId = match[1];\r",
							"        console.log(\"User ID:\", userId);\r",
							"        pm.environment.set(\"userIdReceiver\", userId);\r",
							"    } else {\r",
							"        console.error(\"User ID not found in the response.\");\r",
							"    }\r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"\r",
							"    var responseText = pm.response.text();\r",
							"    var parts = responseText.split(\" \");\r",
							"\r",
							"    var name = parts[3];\r",
							"    var id = parts[7];\r",
							"\r",
							"    // Username length\r",
							"    pm.test(\"Username length is between 2 and 20\", function () {\r",
							"        pm.expect(name.length).to.be.at.least(2);\r",
							"        pm.expect(name.length).to.be.at.most(20);\r",
							"    });\r",
							"\r",
							"    // check id\r",
							"    pm.test(\"ID exists\", function () {\r",
							"        pm.expect(id).to.exist;\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//array for used names\r",
							"let usedUsernames = pm.environment.get(\"usedUsernames\");\r",
							"if (usedUsernames) {\r",
							"    usedUsernames = JSON.parse(usedUsernames);\r",
							"} else {\r",
							"    usedUsernames = [];\r",
							"}\r",
							"\r",
							"function makeid(l) {\r",
							"    var text;\r",
							"    var char_list = \"abcdefghijklmnopqrstuvwxyz\";\r",
							"    \r",
							"    do {\r",
							"        text = \"\";\r",
							"        for(var i = 0; i < l; i++) {\r",
							"            text += char_list.charAt(Math.floor(Math.random() * char_list.length));\r",
							"        }\r",
							"    } while (usedUsernames.includes(text)); // check if the username is unique \r",
							"\r",
							"//\r",
							"    usedUsernames.push(text);\r",
							"    pm.environment.set(\"usedUsernames\", JSON.stringify(usedUsernames));\r",
							"\r",
							"    pm.environment.set(\"usernameReceiver\", text);\r",
							"\r",
							"    return text;\r",
							"}\r",
							"// generate between 2 and 20 \r",
							"const length = Math.floor(Math.random() * 19) + 2;\r",
							"console.log(makeid(length));\r",
							"\r",
							"\r",
							"// generate email\r",
							"\r",
							"const uuid = Math.random().toString(36).substring(2, 15) +\r",
							"            Math.random().toString(36).substring(2, 15);\r",
							"const email = \"test.account.\" + uuid + \"@abv.bg\";\r",
							"pm.environment.set(\"email\", email);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"value": "JSESSIONID={{sessionID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"category\": {\r\n    \"id\": 100,\r\n    \"name\": \"All\"\r\n  },\r\n  \"confirmPassword\": \"Project.10\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"Project.10\",\r\n  \"username\": \"{{usernameReceiver}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/api/users/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate Sender",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    pm.environment.set(\"sessionID - sender\", pm.cookies.get(\"JSESSIONID\"));\r",
							"    console.log(pm.response);\r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{usernameSender}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "Project.10",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8081/authenticate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    var responseText = pm.response.text();\r",
							"\r",
							"    pm.test(\"Phrase 'send friend request to' exists in response\", function () {\r",
							"        pm.expect(responseText).to.include(\"send friend request to\");\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{userIdReceiver}}\",\r\n    \"username\":\"{{usernameReceiver}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/api/auth/request?principal={{firstNameSender}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"api",
						"auth",
						"request"
					],
					"query": [
						{
							"key": "principal",
							"value": "{{firstNameSender}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate Receiver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"        pm.environment.set(\"sessionID - receiver\", pm.cookies.get(\"JSESSIONID\"));\r",
							"        console.log(responseBody);\r",
							"\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{usernameReceiver}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "Project.10",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8081/authenticate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User Requests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"requestId\", jsonData[0].id);\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"ID exists in response\", function () {\r",
							"    pm.expect(jsonData[0].id).to.not.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8081/api/auth/users/{{userIdReceiver}}/request/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"api",
						"auth",
						"users",
						"{{userIdReceiver}}",
						"request",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Approve Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"var responseText = pm.response.text();\r",
							"\r",
							"pm.test(\"Word 'approved' exists in response\", function () {\r",
							"    pm.expect(responseText).to.include(\"approved\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/api/auth/users/{{userIdReceiver}}/request/approve?requestId={{requestId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"api",
						"auth",
						"users",
						"{{userIdReceiver}}",
						"request",
						"approve"
					],
					"query": [
						{
							"key": "requestId",
							"value": "{{requestId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "latestConnectionId",
			"value": ""
		}
	]
}