{
	"info": {
		"_postman_id": "1be0383c-2d5f-408d-a7d0-71fa5a84ece0",
		"name": "WeAre_Social Network Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30132667",
		"_collection_link": "https://dark-astronaut-260412.postman.co/workspace/Telerik---Final-Project-~17b108a4-3f4a-4892-826d-8bb170257f82/collection/30132667-1be0383c-2d5f-408d-a7d0-71fa5a84ece0?action=share&source=collection_link&creator=30132667"
	},
	"item": [
		{
			"name": "rest-connection-controller",
			"item": [
				{
					"name": "Registration Sender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.text(); // Get the response body as text\r",
									"\r",
									"// Extracting ID\r",
									"var matchId = responseBody.match(/id (\\d+)/); \r",
									"\r",
									"if (matchId && matchId[1]) {\r",
									"    var userId = matchId[1];\r",
									"    console.log(\"User ID:\", userId);\r",
									"    pm.environment.set(\"userIdSender\", userId);\r",
									"} else {\r",
									"    console.error(\"User ID not found in the response.\");\r",
									"}\r",
									"\r",
									"// Extracting Name\r",
									"var matchName = responseBody.match(/name (\\w+)/);\r",
									"\r",
									"if (matchName && matchName[1]) {\r",
									"    var userName = matchName[1];\r",
									"    console.log(\"User Name:\", userName);\r",
									"    pm.environment.set(\"userNameSender\", userName);\r",
									"} else {\r",
									"    console.error(\"User Name not found in the response.\");\r",
									"}\r",
									"\r",
									"// Tests\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"ID exists\", function () {\r",
									"    pm.expect(userId).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Name exists\", function () {\r",
									"    pm.expect(userName).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Username length is between 2 and 20\", function () {\r",
									"    pm.expect(userName.length).to.be.at.least(2);\r",
									"    pm.expect(userName.length).to.be.at.most(20);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//array for used names\r",
									"let usedUsernames = pm.environment.get(\"usedUsernames\");\r",
									"if (usedUsernames) {\r",
									"    usedUsernames = JSON.parse(usedUsernames);\r",
									"} else {\r",
									"    usedUsernames = [];\r",
									"}\r",
									"\r",
									"function makeid(l) {\r",
									"    var text;\r",
									"    var char_list = \"abcdefghijklmnopqrstuvwxyz\";\r",
									"    \r",
									"    do {\r",
									"        text = \"\";\r",
									"        for(var i = 0; i < l; i++) {\r",
									"            text += char_list.charAt(Math.floor(Math.random() * char_list.length));\r",
									"        }\r",
									"    } while (usedUsernames.includes(text)); // check if the username is unique \r",
									"\r",
									"//\r",
									"    usedUsernames.push(text);\r",
									"    pm.environment.set(\"usedUsernames\", JSON.stringify(usedUsernames));\r",
									"\r",
									"    pm.environment.set(\"usernameSender\", text);\r",
									"\r",
									"    return text;\r",
									"}\r",
									"// generate between 2 and 20 \r",
									"const length = Math.floor(Math.random() * 19) + 2;\r",
									"console.log(makeid(length));\r",
									"\r",
									"\r",
									"// generate email\r",
									"\r",
									"const uuid = Math.random().toString(36).substring(2, 15) +\r",
									"            Math.random().toString(36).substring(2, 15);\r",
									"const email = \"testaccount.\" + uuid + \"@abv.bg\";\r",
									"pm.environment.set(\"email\", email);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"category\": {\r\n    \"id\": 100,\r\n    \"name\": \"All\"\r\n  },\r\n  \"confirmPassword\": \"Project.10\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"Project.10\",\r\n  \"username\": \"{{usernameSender}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointUsers}}",
							"host": [
								"{{baseUrl}}{{endpointUsers}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Sender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.environment.set(\"sessionID - sender\", pm.cookies.get(\"JSESSIONID\"));\r",
									"    console.log(pm.cookies);\r",
									"\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{usernameSender}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Project.10",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointAuthenticate}}",
							"host": [
								"{{baseUrl}}{{endpointAuthenticate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update First Name Sender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"    const responseBodyInfo = pm.response.json();\r",
									"    const firstName = responseBodyInfo.firstName;\r",
									"    pm.environment.set(\"firstNameSender\", firstName);\r",
									"\r",
									"\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"First name length is at least 3\", function () {\r",
									"        pm.expect(jsonData.firstName.length).to.be.at.least(3);\r",
									"    });\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"randomFirstName\", pm.variables.replaceIn(\"{{randomFirstName}}\"));\r",
									"pm.environment.set(\"randomLastName\", pm.variables.replaceIn(\"{{randomLastName}}\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "Idea-a913d7da=066876f0-82a7-4363-a9c7-28ebe0bf6e96; JSESSIONID={{sessionID}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{userIdSender}}\",\r\n    \"username\": \"{{usernameSender}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"Ivanov\",\r\n    \"gender\": \"MALE\",\r\n    \"birthYear\": \"1905-12-09\",\r\n    \"personalReview\": null,\r\n    \"expertise\": \"Doctor\",\r\n    \"skills\": [],\r\n    \"location\": {\r\n        \"city\": {\r\n            \"country\": {},\r\n            \"id\": 23\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/auth/{{userIdSender}}/personal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"auth",
								"{{userIdSender}}",
								"personal"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.text(); // Get the response body as text\r",
									"\r",
									"// Extracting ID\r",
									"var matchId = responseBody.match(/id (\\d+)/); \r",
									"\r",
									"if (matchId && matchId[1]) {\r",
									"    var userId = matchId[1];\r",
									"    console.log(\"User ID:\", userId);\r",
									"    pm.environment.set(\"userIdReceiver\", userId);\r",
									"} else {\r",
									"    console.error(\"User ID not found in the response.\");\r",
									"}\r",
									"\r",
									"// Extracting Name\r",
									"var matchName = responseBody.match(/name (\\w+)/);\r",
									"\r",
									"if (matchName && matchName[1]) {\r",
									"    var userName = matchName[1];\r",
									"    console.log(\"User Name:\", userName);\r",
									"    pm.environment.set(\"userNameReceiver\", userName);\r",
									"} else {\r",
									"    console.error(\"User Name not found in the response.\");\r",
									"}\r",
									"\r",
									"// Tests\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"ID exists\", function () {\r",
									"    pm.expect(userId).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Name exists\", function () {\r",
									"    pm.expect(userName).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Username length is between 2 and 20\", function () {\r",
									"    pm.expect(userName.length).to.be.at.least(2);\r",
									"    pm.expect(userName.length).to.be.at.most(20);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//array for used names\r",
									"let usedUsernames = pm.environment.get(\"usedUsernames\");\r",
									"if (usedUsernames) {\r",
									"    usedUsernames = JSON.parse(usedUsernames);\r",
									"} else {\r",
									"    usedUsernames = [];\r",
									"}\r",
									"\r",
									"function makeid(l) {\r",
									"    var text;\r",
									"    var char_list = \"abcdefghijklmnopqrstuvwxyz\";\r",
									"    \r",
									"    do {\r",
									"        text = \"\";\r",
									"        for(var i = 0; i < l; i++) {\r",
									"            text += char_list.charAt(Math.floor(Math.random() * char_list.length));\r",
									"        }\r",
									"    } while (usedUsernames.includes(text)); // check if the username is unique \r",
									"\r",
									"//\r",
									"    usedUsernames.push(text);\r",
									"    pm.environment.set(\"usedUsernames\", JSON.stringify(usedUsernames));\r",
									"\r",
									"    pm.environment.set(\"usernameReceiver\", text);\r",
									"\r",
									"    return text;\r",
									"}\r",
									"// generate between 2 and 20 \r",
									"const length = Math.floor(Math.random() * 19) + 2;\r",
									"console.log(makeid(length));\r",
									"\r",
									"\r",
									"// generate email\r",
									"\r",
									"const uuid = Math.random().toString(36).substring(2, 15) +\r",
									"            Math.random().toString(36).substring(2, 15);\r",
									"const email = \"test.account.\" + uuid + \"@abv.bg\";\r",
									"pm.environment.set(\"email\", email);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"category\": {\r\n    \"id\": 100,\r\n    \"name\": \"All\"\r\n  },\r\n  \"confirmPassword\": \"Project.10\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"Project.10\",\r\n  \"username\": \"{{usernameReceiver}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointUsers}}",
							"host": [
								"{{baseUrl}}{{endpointUsers}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Sender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.environment.set(\"sessionID - sender\", pm.cookies.get(\"JSESSIONID\"));\r",
									"    console.log(pm.response);\r",
									"\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{usernameSender}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Project.10",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointAuthenticate}}",
							"host": [
								"{{baseUrl}}{{endpointAuthenticate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    var responseText = pm.response.text();\r",
									"\r",
									"    pm.test(\"Phrase 'send friend request to' exists in response\", function () {\r",
									"        pm.expect(responseText).to.include(\"send friend request to\");\r",
									"    });\r",
									"\r",
									"var usernameSender = pm.environment.get(\"usernameSender\");\r",
									"var usernameReceiver = pm.environment.get(\"usernameReceiver\")\r",
									"\r",
									"var responseText = pm.response.text();\r",
									"\r",
									"pm.test(\"UsernameSender exists in response\", function () {\r",
									"    pm.expect(responseText).to.include(`${usernameSender}`);\r",
									"});\r",
									"\r",
									"pm.test(\"UsernameReceiver exists in response\", function () {\r",
									"    pm.expect(responseText).to.include(` ${usernameReceiver}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{userIdReceiver}}\",\r\n    \"username\":\"{{usernameReceiver}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/request?principal={{firstNameSender}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"request"
							],
							"query": [
								{
									"key": "principal",
									"value": "{{firstNameSender}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Receiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"        pm.environment.set(\"sessionID - receiver\", pm.cookies.get(\"JSESSIONID\"));\r",
									"        console.log(responseBody);\r",
									"\r",
									"        pm.test(\"Status code is 200\", function () {\r",
									"            pm.response.to.have.status(200);\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{usernameReceiver}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Project.10",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointAuthenticate}}",
							"host": [
								"{{baseUrl}}{{endpointAuthenticate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"requestId\", jsonData[0].id);\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected properties\", function () {\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('approved');\r",
									"    pm.expect(jsonData[0]).to.have.property('seen');\r",
									"    pm.expect(jsonData[0]).to.have.property('timeStamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Timezone offset is correct\", function () {\r",
									"    let timeStampFromResponse = jsonData[0].timeStamp;  \r",
									"    let format = \"DD/MM/YYYY HH:mm\";\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}{{endpointAuth}}{{userIdReceiver}}/request/",
							"host": [
								"{{baseUrl}}{{endpointAuth}}{{userIdReceiver}}"
							],
							"path": [
								"request",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var responseText = pm.response.text();\r",
									"\r",
									"pm.test(\"Word 'approved' exists in response\", function () {\r",
									"    pm.expect(responseText).to.include(\"approved\");\r",
									"});\r",
									"\r",
									"var usernameSender = pm.environment.get(\"usernameSender\");\r",
									"var usernameReceiver = pm.environment.get(\"usernameReceiver\")\r",
									"\r",
									"pm.test(\"UsernameSender exists in response\", function () {\r",
									"    pm.expect(responseText).to.include(`${usernameSender}`);\r",
									"});\r",
									"\r",
									"pm.test(\"UsernameReceiver exists in response\", function () {\r",
									"    pm.expect(responseText).to.include(`${usernameReceiver}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointAuth}}{{userIdReceiver}}{{endpointRequestAprrove}}={{requestId}}",
							"host": [
								"{{baseUrl}}{{endpointAuth}}{{userIdReceiver}}{{endpointRequestAprrove}}={{requestId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "rest-user-controller",
			"item": [
				{
					"name": "Registration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"newEmail\", \"testaccount.\" + Math.floor(Math.random() * 10000) + \"@abv.bg\");\r",
									"\r",
									"pm.environment.set(\"newUsername\", \"MrTest\" + generateString(5))\r",
									"\r",
									"function generateString(length) {\r",
									"  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  let result = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
									"    result += characters.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return result;\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.request)",
									"",
									"var responseBody = pm.response.text(); // Get the response body as text",
									"let match = responseBody.match(/id (\\d+)/); // Use a regular expression to extract the userId",
									"let userId;",
									"let username;",
									"if (match && match[1]) {",
									"    userId = match[1];",
									"    console.log(\"User ID:\", userId);",
									"    pm.environment.set(\"userId\", userId);",
									"} else {",
									"    console.error(\"User ID not found in the response.\");",
									"}",
									"",
									"match = responseBody.match(/User with name (\\w+)/); // Use a regular expression to extract the username",
									"",
									"if (match && match[1]) {",
									"    username = match[1];",
									"    console.log(\"Username:\", username);",
									"    pm.environment.set(\"username\", username);",
									"} else {",
									"    console.error(\"Username not found in the response.\");",
									"}",
									"",
									"//Assert Response status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Assert registered username is the same as provided one",
									"pm.test('Username are equal`', () => {",
									"    pm.expect(username).to.have.string(pm.environment.get(\"username\"))",
									"})",
									"//assert userId is a number",
									"pm.test('userId to be a number', () => {",
									"    pm.expect(userId).not.to.be.NaN;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"category\": {\r\n    \"id\": {{categoryId}},\r\n    \"name\": \"{{categoryName}}\"\r\n  },\r\n  \"confirmPassword\": \"{{password}}\",\r\n  \"email\": \"{{newEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"username\": \"{{newUsername}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointUsers}}",
							"host": [
								"{{baseUrl}}{{endpointUsers}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate - set JSESSIONID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"sessionID\", pm.cookies.get(\"JSESSIONID\"));\r",
									"console.log(pm.cookies.get(\"JSESSIONID\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointAuthenticate}}",
							"host": [
								"{{baseUrl}}{{endpointAuthenticate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assert Response status",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Assert response data is an array",
									"pm.test(\"Response is an array\", function() {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each user object has the required properties\", function() {",
									"    pm.response.json().forEach(function(user) {",
									"        pm.expect(user).to.have.property('userId');",
									"        pm.expect(user).to.have.property('username');",
									"        pm.expect(user).to.have.property('expertiseProfile');",
									"        pm.expect(user).to.have.property('enabled');",
									"        pm.expect(user).to.have.property('accountNonExpired');",
									"        pm.expect(user).to.have.property('credentialsNonExpired');",
									"        pm.expect(user).to.have.property('accountNonLocked');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"index\": 0,\r\n  \"next\": true,\r\n  \"searchParam1\": \"\",\r\n  \"searchParam2\": \"\",\r\n  \"size\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('User has the correct ID', () => {",
									"    response.id == pm.environment.get(\"userId\");",
									"})",
									"",
									"pm.test('User has the correct username', () => {",
									"    response.username == pm.environment.get(\"username\");",
									"})",
									"",
									"pm.test('User has the correct email', () => {",
									"    response.email == pm.environment.get(\"email\");",
									"})",
									"pm.test(\"Response has the correct schema\", function () {",
									"  var schema = {",
									"    type: \"object\",",
									"    properties: {",
									"      id: { type: \"number\" },",
									"      username: { type: \"string\" },",
									"      authorities: { type: \"array\" },",
									"      email: { type: \"string\" },",
									"      firstName: { type: [\"string\", \"null\"] },",
									"      lastName: { type: [\"string\", \"null\"] },",
									"      gender: { type: [\"string\", \"null\"] },",
									"      city: { type: [\"string\", \"null\"] },",
									"      birthYear: { type: [\"number\", \"null\"] },",
									"      personalReview: { type: [\"string\", \"null\"] },",
									"      expertise: { type: \"string\" },",
									"      skills: { type: \"array\" }",
									"    },",
									"    required: [\"id\", \"username\", \"authorities\", \"email\", \"expertise\", \"skills\"]",
									"  };",
									"",
									"  var response = pm.response.json();",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{endpointUsersAuth}}{{userId}}?principal={{username}}",
							"host": [
								"{{baseUrl}}{{endpointUsersAuth}}{{userId}}"
							],
							"query": [
								{
									"key": "principal",
									"value": "{{username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const currentUsername = pm.environment.get(\"username\");",
									"const currentUser = (pm.response.json().filter(x => x.username == currentUsername));",
									"console.log(currentUser)",
									"pm.environment.set(\"userId\", currentUser[0].userId);",
									"",
									"pm.test('The right user is returned', () => {",
									"    pm.test(currentUser[0].username == currentUsername)",
									"})",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"index\": 0,\r\n  \"next\": true,\r\n  \"searchParam1\": \"\",\r\n  \"searchParam2\": \"\",\r\n  \"size\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get profile posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"size\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointUsers}}{{userId}}/posts",
							"host": [
								"{{baseUrl}}{{endpointUsers}}{{userId}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user expertise",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.request.body)",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.id).to.be.at.least(0, \"'id' field should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'skills' field is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.skills).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Skills array should have at least one element\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the category field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.category).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.category.id).to.be.a('number').and.to.be.at.least(0, \"id should be non-negative\");",
									"    pm.expect(responseData.category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"name should not be empty\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 79,\r\n    \"category\": {\r\n        \"id\": 155,\r\n        \"name\": \"Marketing Updated\"\r\n    },\r\n    \"availability\": 44.66\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointUsersAuth}}{{userId}}/expertise",
							"host": [
								"{{baseUrl}}{{endpointUsersAuth}}{{userId}}"
							],
							"path": [
								"expertise"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user personal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "Idea-a913d7da=066876f0-82a7-4363-a9c7-28ebe0bf6e96; JSESSIONID={{sessionID}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"firstName\": \"{{firstNameUpdated}}\",\r\n    \"lastName\": \"{{lastNameUpdated}}\",\r\n    \"gender\": \"{{gender}}\",\r\n    \"birthYear\": \"{{birthYearUpdated}}\",\r\n    \"personalReview\": null,\r\n    \"expertise\": \"Doctor\",\r\n    \"skills\": [],\r\n    \"location\": {\r\n        \"city\": {\r\n            \"country\": {},\r\n            \"id\": 23\r\n        }\r\n    }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointUsersAuth}}{{userId}}/personal",
							"host": [
								"{{baseUrl}}{{endpointUsersAuth}}{{userId}}"
							],
							"path": [
								"personal"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "rest-skill-controller",
			"item": [
				{
					"name": "Create a Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.request.body)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Set skillId in a variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"storedSkillId\", jsonData.skillId);\r",
									"});\r",
									"\r",
									"pm.test(\"Skill ID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var storedSkillId = pm.environment.get(\"storedSkillId\"); \r",
									"    pm.expect(jsonData.skillId).to.eql(Number(storedSkillId)); \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Set skill in a variable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"storedSkill\", jsonData.skill);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var usedSkills = JSON.parse(pm.environment.get(\"usedSkills\") || \"[]\");\r",
									"var storedSkill;\r",
									"\r",
									"do {\r",
									"    storedSkill = pm.variables.replaceIn('{{$randomJobTitle}}');\r",
									"} while (usedSkills.includes(storedSkill));\r",
									"\r",
									"usedSkills.push(storedSkill); \r",
									"pm.environment.set(\"usedSkills\", JSON.stringify(usedSkills));\r",
									"pm.environment.set(\"storedSkill\", storedSkill);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"skillId\": 145,\r\n  \"skill\": \"{{storedSkill}}\",\r\n  \"category\": {\r\n    \"id\": 157,\r\n    \"name\": \"Marketing\"\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/skill/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"skill",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set skillId in a variable\", function () {\r",
									"    var jsonData = pm.response.json();  \r",
									"    pm.environment.set(\"storedSkillId\", jsonData.skillId);\r",
									"});\r",
									"\r",
									"pm.test(\"Compare storedSkillId with response\", function () {\r",
									"    var jsonData = pm.response.json();  \r",
									"    var storedSkillId = pm.environment.get(\"storedSkillId\"); \r",
									"    pm.expect(jsonData.skillId).to.eql(Number(storedSkillId)); \r",
									"});\r",
									"\r",
									"pm.test(\"Compare storedSkill with response\", function () {\r",
									"    var jsonData = pm.response.json();  \r",
									"    var storedSkill = pm.environment.get(\"storedSkill\"); \r",
									"    pm.expect(jsonData.skill).to.eql(storedSkill); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{endpointSkill}}/getOne?skillId={{storedSkillId}}",
							"host": [
								"{{baseUrl}}{{endpointSkill}}"
							],
							"path": [
								"getOne"
							],
							"query": [
								{
									"key": "skillId",
									"value": "{{storedSkillId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.response.json())\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the objects are more than one\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.length).to.be.above(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if storedSkillId exists in the response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var storedSkillId = pm.environment.get(\"storedSkillId\");\r",
									"\r",
									"    var exists = jsonData.some(function(item) {\r",
									"        return item.skillId === storedSkillId;\r",
									"    });\r",
									"    pm.expect(exists).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if storedSkill exists in the response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var storedSkill = pm.environment.get(\"storedSkill\");\r",
									"\r",
									"    var exists = jsonData.some(function(item) {\r",
									"        return item.skill === storedSkill;\r",
									"    });\r",
									"    pm.expect(exists).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{endpointSkill}}?sorted=true",
							"host": [
								"{{baseUrl}}{{endpointSkill}}"
							],
							"query": [
								{
									"key": "sorted",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"var usedSkills = JSON.parse(pm.environment.get(\"usedSkills\") || \"[]\");\r",
									"\r",
									"var storedSkill;\r",
									"var newSkill;\r",
									"\r",
									"do {\r",
									"    storedSkill = pm.variables.replaceIn('{{$randomJobTitle}}');\r",
									"} while (usedSkills.includes(storedSkill));\r",
									"\r",
									"do {\r",
									"    newSkill = pm.variables.replaceIn('{{$randomJobTitle}}');\r",
									"} while (usedSkills.includes(newSkill));\r",
									"\r",
									"usedSkills.push(storedSkill);\r",
									"\r",
									"pm.environment.set(\"usedSkills\", JSON.stringify(usedSkills));\r",
									"\r",
									"pm.environment.set(\"storedSkill\", storedSkill);\r",
									"pm.environment.set(\"newSkill\", newSkill);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8081/api/skill/edit?skill={{newSkill}}&skillId={{storedSkillId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"api",
								"skill",
								"edit"
							],
							"query": [
								{
									"key": "skill",
									"value": "{{newSkill}}"
								},
								{
									"key": "skillId",
									"value": "{{storedSkillId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/skill/delete?skillId={{storedSkillId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"skill",
								"delete"
							],
							"query": [
								{
									"key": "skillId",
									"value": "{{storedSkillId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const name = pm.variables.replaceIn('{{$randomJobType}}');",
							"pm.collectionVariables.set(\"skillTitle\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "rest-post-controller",
			"item": [
				{
					"name": "Registration post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"        /*\r",
									"        we are retrieving user ID for use further request\r",
									"        for example edit user info, etc.\r",
									"        */\r",
									"        var responseBody = pm.response.text(); // Get the response body as text\r",
									"        var match = responseBody.match(/id (\\d+)/); // Use a regular expression to extract the userId\r",
									"\r",
									"        if (match && match[1]) {\r",
									"        var userId = match[1];\r",
									"        console.log(\"User ID:\", userId);\r",
									"        pm.environment.set(\"userId_post\", userId);\r",
									"        } else {\r",
									"        console.error(\"User ID not found in the response.\");\r",
									"        }\r",
									"\r",
									"        pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        });\r",
									"\r",
									"\r",
									"        var responseText = pm.response.text();\r",
									"        var parts = responseText.split(\" \");\r",
									"\r",
									"        var name = parts[3];\r",
									"        var id = parts[7];\r",
									"\r",
									"        // check name   length \r",
									"        pm.test(\"Name length is between 2 and 20\", function () {\r",
									"        pm.expect(name.length).to.be.at.least(2);\r",
									"        pm.expect(name.length).to.be.at.most(20);\r",
									"        });\r",
									"\r",
									"        // check id exists\r",
									"        pm.test(\"ID exists\", function () {\r",
									"        pm.expect(id).to.exist;\r",
									"        });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//array for used names\r",
									"let usedUsernames = pm.environment.get(\"usedUsernames\");\r",
									"if (usedUsernames) {\r",
									"    usedUsernames = JSON.parse(usedUsernames);\r",
									"} else {\r",
									"    usedUsernames = [];\r",
									"}\r",
									"\r",
									"function makeid(l) {\r",
									"    var text;\r",
									"    var char_list = \"abcdefghijklmnopqrstuvwxyz\";\r",
									"    \r",
									"    do {\r",
									"        text = \"\";\r",
									"        for(var i = 0; i < l; i++) {\r",
									"            text += char_list.charAt(Math.floor(Math.random() * char_list.length));\r",
									"        }\r",
									"    } while (usedUsernames.includes(text)); // check if the username is unique \r",
									"\r",
									"//\r",
									"    usedUsernames.push(text);\r",
									"    pm.environment.set(\"usedUsernames\", JSON.stringify(usedUsernames));\r",
									"\r",
									"    pm.environment.set(\"username_post\", text);\r",
									"\r",
									"    return text;\r",
									"}\r",
									"// generate between 2 and 20 \r",
									"const length = Math.floor(Math.random() * 19) + 2;\r",
									"console.log(makeid(length));\r",
									"\r",
									"\r",
									"// generate email\r",
									"\r",
									"const uuid = Math.random().toString(36).substring(2, 15) +\r",
									"            Math.random().toString(36).substring(2, 15);\r",
									"const email = \"testaccount.\" + uuid + \"@abv.bg\";\r",
									"pm.environment.set(\"email_post\", email);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"category\": {\r\n    \"id\": 100,\r\n    \"name\": \"All\"\r\n  },\r\n  \"confirmPassword\": \"Project.10\",\r\n  \"email\": \"{{email_post}}\",\r\n  \"password\": \"Project.10\",\r\n  \"username\": \"{{username_post}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointUsers}}",
							"host": [
								"{{baseUrl}}{{endpointUsers}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.cookies.get('JSESSIONID'))\r",
									"const sessionId = pm.cookies.get('JSESSIONID')\r",
									"pm.environment.set(\"sessionID\", sessionId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username_post}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Project.10",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointAuthenticate}}",
							"host": [
								"{{baseUrl}}{{endpointAuthenticate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"retriving cookie value from login authenticate request\r",
									"so first login auth req should be run\r",
									"*/\r",
									"console.log(pm.cookies.get('JSESSIONID'))\r",
									"const sessionId = pm.cookies.get('JSESSIONID')\r",
									"pm.environment.set(\"sessionID\", sessionId);\r",
									"\r",
									"/*\r",
									"we are retrieving posted ID for use further request\r",
									"for example likeAPost, editPost\r",
									"*/\r",
									"var JSONData = JSON.parse(responseBody)\r",
									"console.log(JSONData[\"postId\"])\r",
									"pm.environment.set(\"postId\",JSONData[\"postId\"])\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The post is created \", function () {\r",
									"    // Extract the JSON response data\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    // Check if the response data contains the expected properties\r",
									"    pm.expect(responseData).to.have.property(\"postId\");\r",
									"    pm.expect(responseData).to.have.property(\"content\");\r",
									"    pm.expect(responseData).to.have.property(\"date\");\r",
									"    pm.expect(responseData).to.have.property(\"likes\");\r",
									"    pm.expect(responseData).to.have.property(\"liked\");\r",
									"\r",
									"    // Assert the success of the test\r",
									"    pm.expect(true).to.be.true; // This line ensures the test passes\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"I am a teacher \",\r\n    \"picture\": \"\",\r\n    \"public\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointCreatePost}}",
							"host": [
								"{{baseUrl}}{{endpointCreatePost}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"updatedcontent1\",\r\n    \"picture\": \"string\",\r\n    \"public\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointEditPost}}?postId={{postId}}",
							"host": [
								"{{baseUrl}}{{endpointEditPost}}"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Like a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the post is liked\", function () {\r",
									"    // Extract the JSON response data\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    // Check if the 'liked' property in the response is true\r",
									"    pm.expect(responseData.liked).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{endpointLikeAPost}}?postId={{postId}}",
							"host": [
								"{{baseUrl}}{{endpointLikeAPost}}"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Dislike a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the post is disliked\", function () {\r",
									"    // Extract the JSON response data\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    // Check if the 'liked' property in the response is true\r",
									"    pm.expect(responseData.liked).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{endpointLikeAPost}}?postId={{postId}}",
							"host": [
								"{{baseUrl}}{{endpointLikeAPost}}"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "Content-Length",
								"value": "0",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{baseUrl}}{{endpointDeletePost}}?postId={{postId}}",
							"host": [
								"{{baseUrl}}{{endpointDeletePost}}"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get news feeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All posts are present in the news feed\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    var responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/post/?sorted=true&unsorted=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"post",
								""
							],
							"query": [
								{
									"key": "sorted",
									"value": "true"
								},
								{
									"key": "unsorted",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the comments of the post are found\", function () {\r",
									"    // Extract the JSON response data\r",
									"    const responseData = pm.response.json();\r",
									"    // Check if the response data is an array\r",
									"    pm.expect(responseData).to.be.an(\"array\");\r",
									"    // Check if there is at least one comment in the response\r",
									"    pm.expect(responseData.length).to.be.above(0);\r",
									"    // Iterate through each comment in the response\r",
									"    for (const comment of responseData) {\r",
									"        // Check if each comment has the expected properties\r",
									"        pm.expect(comment).to.have.property(\"commentId\");\r",
									"        pm.expect(comment).to.have.property(\"content\");\r",
									"        pm.expect(comment).to.have.property(\"date\");\r",
									"        pm.expect(comment).to.have.property(\"likes\");\r",
									"        pm.expect(comment).to.have.property(\"liked\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{endpointShowComments}}?postId={{postId}}",
							"host": [
								"{{baseUrl}}{{endpointShowComments}}"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "rest-comment-controller",
			"item": [
				{
					"name": "Create a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"we are retrieving comment ID for use further request\r",
									"for example like comment, delete comment, etc.\r",
									"*/\r",
									"var JSONData = JSON.parse(responseBody)\r",
									"console.log(JSONData[\"commentId\"])\r",
									"pm.environment.set(\"commentId\",JSONData[\"commentId\"])\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if a comment is created with expected properties\", function () {\r",
									"    // Extract the JSON response data\r",
									"    const responseData = pm.response.json();\r",
									"    // Check if the response data contains the expected properties\r",
									"    pm.expect(responseData).to.have.property(\"commentId\");\r",
									"    pm.expect(responseData).to.have.property(\"content\");\r",
									"    pm.expect(responseData).to.have.property(\"date\");\r",
									"    pm.expect(responseData).to.have.property(\"likes\");\r",
									"    pm.expect(responseData).to.have.property(\"liked\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"commentId\": 0,\r\n  \"content\": \"Testing\",\r\n  \"deletedConfirmed\": true,\r\n  \"postId\": {{postId}},\r\n  \"userId\": {{userId_post}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/comment/auth/creator",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comment",
								"auth",
								"creator"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/comment/auth/editor?commentId={{commentId}}&content=update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comment",
								"auth",
								"editor"
							],
							"query": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								},
								{
									"key": "content",
									"value": "update"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Like a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if at least one comment is liked in the response and capture the liked comment ID\", function () {\r",
									"    // Extract the JSON response data\r",
									"    const responseData = pm.response.json();\r",
									"    // Check if the response data contains the 'liked' property\r",
									"    pm.expect(responseData).to.have.property(\"liked\");\r",
									"    // Check if the 'liked' property is set to true\r",
									"    pm.expect(responseData.liked).to.be.true;\r",
									"    // Find the 'commentId' of the liked comment\r",
									"    const likedCommentId = responseData.commentId;\r",
									"    // Ensure that a liked comment was found\r",
									"    pm.expect(likedCommentId).to.exist;\r",
									"    // Store the 'commentId' in an environment variable for future use\r",
									"    pm.environment.set(\"likedCommentId\", likedCommentId);\r",
									"    // Log the 'commentId' for reference\r",
									"    console.log(`Liked Comment ID: ${likedCommentId}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/comment/auth/likesUp?commentId={{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comment",
								"auth",
								"likesUp"
							],
							"query": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find all comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All comments are present in response\", function () {\r",
									"    // Extract the JSON response data\r",
									"    const responseData = pm.response.json();\r",
									"    // Extract commentIds from the response\r",
									"    const responseCommentIds = responseData.map(comment => comment.commentId);\r",
									"    // Ensure that there are comments in the response\r",
									"    pm.expect(responseCommentIds.length).to.be.above(0);\r",
									"    // Check if the response commentIds match each other (i.e., all are unique)\r",
									"    pm.expect(responseCommentIds).to.have.members(responseCommentIds);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find all comments of a Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All comments are present for the same post\", function () {\r",
									"    // Extract the JSON response data\r",
									"    const responseData = pm.response.json();\r",
									"    // Ensure that there are comments in the response\r",
									"    pm.expect(responseData.length).to.be.above(0);\r",
									"    // Store the postId of the first comment\r",
									"    const postId = responseData[0].postId;\r",
									"    // Use a Set to track unique commentIds\r",
									"    const uniqueCommentIds = new Set();\r",
									"    // Check each comment in the response\r",
									"    responseData.forEach(comment => {\r",
									"        // Ensure that the comment belongs to the same post\r",
									"        pm.expect(comment.postId).to.equal(postId);\r",
									"        // Ensure that the comment has a unique commentId\r",
									"        pm.expect(uniqueCommentIds.has(comment.commentId)).to.be.false;\r",
									"        // Add the commentId to the Set\r",
									"        uniqueCommentIds.add(comment.commentId);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/comment/byPost?postId={{postId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comment",
								"byPost"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one comment of a Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Get one comment of a post\", function () {\r",
									"    // Extract the JSON response data\r",
									"    const responseData = pm.response.json();\r",
									"    // Ensure that the response data contains the necessary properties\r",
									"    pm.expect(responseData).to.have.property(\"commentId\");\r",
									"    pm.expect(responseData).to.have.property(\"content\");\r",
									"    pm.expect(responseData).to.have.property(\"date\");\r",
									"    // You can also capture the comment data or specific properties for further use\r",
									"    pm.environment.set(\"capturedComment\", responseData);\r",
									"    // Log the comment data for reference\r",
									"    console.log(\"Captured Comment:\", responseData);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/comment/single?commentId={{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comment",
								"single"
							],
							"query": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID={{sessionID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/comment/auth/manager?commentId={{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comment",
								"auth",
								"manager"
							],
							"query": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "skillTitle",
			"value": ""
		}
	]
}